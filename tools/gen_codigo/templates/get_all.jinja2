#[get("/{{ table_name }}")]
async fn get_all_{{ table_name }}(
    query: web::Query<PaginationQuery>,
) -> Result<HttpResponse, AppError> {
    {{ connection_code | indent(4) }}

    let {{ table_name }} = sqlx::query_as!(
        {{ struct_name }},
        r#"
        SELECT * FROM {{ table_name }}
        LIMIT ?
        OFFSET ?
        "#,
        query.limit.unwrap_or(100),
        query.offset.unwrap_or(0)
    )
    .fetch_all(&mut conn)
    .await
    .map_err(|e| AppError::DatabaseError(e.to_string()))?;

    Ok(HttpResponse::Ok().json({{ table_name }}))
}

#[derive(Debug, Deserialize)]
pub struct PaginationQuery {
    #[serde(default = "default_limit")]
    pub limit: Option<i64>,
    #[serde(default)]
    pub offset: Option<i64>,
}

fn default_limit() -> Option<i64> {
    Some(100)
}
